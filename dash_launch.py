# -*- coding: utf-8 -*-
"""Dash_launch

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Cjh5V-nO-RmiaE7CyTAlwt4Lt6cTCAG
"""

!pip install pandas dash

import pandas as pd
from dash import html
from dash import dcc

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_dash.csv"
data = pd.read_csv(url)

data.head()

!wget "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_3/spacex_dash_app.py"

!pip install flask-ngrok

import pandas as pd
from dash import Dash, html, dcc
from flask import Flask
from flask_ngrok import run_with_ngrok

# Загрузка данных
spacex_df = pd.read_csv("spacex_launch_dash.csv")

# Создаем сервер Flask
server = Flask(__name__)
app = Dash(__name__, server=server)
run_with_ngrok(server)

# Получаем уникальные значения сайтов запусков
launch_sites = spacex_df['Launch Site'].unique()
options = [{'label': site, 'value': site} for site in launch_sites]
options.insert(0, {'label': 'All Sites', 'value': 'ALL'})

# Определяем макет приложения
app.layout = html.Div([
    html.H1("SpaceX Launch Dashboard"),

    dcc.Dropdown(
        id='site-dropdown',
        options=options,
        value='ALL',
        multi=False
    ),

import pandas as pd
from dash import Dash, html, dcc, Input, Output
from flask import Flask
from flask_ngrok import run_with_ngrok
import plotly.express as px

# Загрузка данных
spacex_df = pd.read_csv("spacex_launch_dash.csv")

# Создаем сервер Flask
server = Flask(__name__)
app = Dash(__name__, server=server)
run_with_ngrok(server)

# Получаем уникальные значения сайтов запусков
launch_sites = spacex_df['Launch Site'].unique()
options = [{'label': site, 'value': site} for site in launch_sites]
options.insert(0, {'label': 'All Sites', 'value': 'ALL'})

# Определяем макет приложения
app.layout = html.Div([
    html.H1("SpaceX Launch Dashboard"),

    dcc.Dropdown(
        id='site-dropdown',
        options=options,
        value='ALL',
        multi=False
    ),

    dcc.Graph(id='success-pie-chart')  # График для отображения результатов
])

# Callback функция для обновления графика на основе выбранного сайта
@app.callback(
    Output('success-pie-chart', 'figure'),
    Input('site-dropdown', 'value')
)
def update_pie_chart(selected_site):
    if selected_site == 'ALL':
        # Если выбраны все сайты, считаем общее количество успешных запусков
        success_counts = spacex_df['class'].value_counts()
        labels = ['Failed', 'Success']
        values = [success_counts[0], success_counts[1]]  # class=0 и class=1
    else:
        # Фильтруем данные для выбранного сайта
        filtered_df = spacex_df[spacex_df['Launch Site'] == selected_site]
        success_counts = filtered_df['class'].value_counts()
        labels = ['Failed', 'Success']
        values = [success_counts.get(0, 0), success_counts.get(1, 0)]  # Обработка случая, если нет запусков

    # Создаем график
    fig = px.pie(names=labels, values=values, title=f'Success Counts for {selected_site}')
    return fig

if __name__ == '__main__':
    app.run()

import pandas as pd
from dash import Dash, html, dcc, Input, Output
from flask import Flask
from flask_ngrok import run_with_ngrok
import plotly.express as px

# Загрузка данных
spacex_df = pd.read_csv("spacex_launch_dash.csv")

# Создаем сервер Flask
server = Flask(__name__)
app = Dash(__name__, server=server)
run_with_ngrok(server)  # Запускаем ngrok

# Получаем уникальные значения сайтов запусков
launch_sites = spacex_df['Launch Site'].unique()
options = [{'label': site, 'value': site} for site in launch_sites]
options.insert(0, {'label': 'All Sites', 'value': 'ALL'})

# Определяем минимальные и максимальные значения для слайдера
min_payload = spacex_df['Payload Mass (kg)'].min()
max_payload = spacex_df['Payload Mass (kg)'].max()

# Определяем макет приложения
app.layout = html.Div([
    html.H1("SpaceX Launch Dashboard"),

    dcc.Dropdown(
        id='site-dropdown',
        options=options,
        value='ALL',
        multi=False
    ),

    dcc.Graph(id='success-pie-chart'),  # График для отображения результатов

    # Добавляем слайдер для выбора диапазона нагрузки
    dcc.RangeSlider(
        id='payload-slider',
        min=0,
        max=10000,
        step=1000,
        value=[min_payload, max_payload],
        marks={i: str(i) for i in range(0, 10001, 1000)}
    ),


])

# Callback функция для обновления графика на основе выбранного сайта
@app.callback(
    Output('success-pie-chart', 'figure'),
    Input('site-dropdown', 'value'),
    Input('payload-slider', 'value')
)
def update_pie_chart(selected_site, payload_range):
    if selected_site == 'ALL':
        # Если выбраны все сайты, считаем общее количество успешных запусков
        filtered_df = spacex_df[
            (spacex_df['Payload Mass (kg)'] >= payload_range[0]) &
            (spacex_df['Payload Mass (kg)'] <= payload_range[1])
        ]
        success_counts = filtered_df['class'].value_counts()
        labels = ['Failed', 'Success']
        values = [success_counts.get(0, 0), success_counts.get(1, 0)]
    else:
        # Фильтруем данные для выбранного сайта
        filtered_df = spacex_df[
            (spacex_df['Launch Site'] == selected_site) &
            (spacex_df['Payload Mass (kg)'] >= payload_range[0]) &
            (spacex_df['Payload Mass (kg)'] <= payload_range[1])
        ]
        success_counts = filtered_df['class'].value_counts()
        labels = ['Failed', 'Success']
        values = [success_counts.get(0, 0), success_counts.get(1, 0)]

    # Создаем график
    fig = px.pie(names=labels, values=values, title=f'Success Counts for {selected_site}')
    return fig

if __name__ == '__main__':
    app.run()

import pandas as pd
from dash import Dash, html, dcc, Input, Output
from flask import Flask
from flask_ngrok import run_with_ngrok
import plotly.express as px

# Загрузка данных
spacex_df = pd.read_csv("spacex_launch_dash.csv")

# Создаем сервер Flask
server = Flask(__name__)
app = Dash(__name__, server=server)
run_with_ngrok(server)  # Запускаем ngrok

# Получаем уникальные значения сайтов запусков
launch_sites = spacex_df['Launch Site'].unique()
options = [{'label': site, 'value': site} for site in launch_sites]
options.insert(0, {'label': 'All Sites', 'value': 'ALL'})  # Добавляем опцию "All Sites"

# Определяем минимальные и максимальные значения для слайдера
min_payload = spacex_df['Payload Mass (kg)'].min()
max_payload = spacex_df['Payload Mass (kg)'].max()

# Определяем макет приложения
app.layout = html.Div([
    html.H1("SpaceX Launch Dashboard"),

    dcc.Dropdown(
        id='site-dropdown',
        options=options,
        value='ALL',  # Значение по умолчанию
        multi=False  # Не разрешаем множественный выбор
    ),

    dcc.Graph(id='success-pie-chart'),  # График для отображения результатов

    # Добавляем слайдер для выбора диапазона нагрузки
    dcc.RangeSlider(
        id='payload-slider',
        min=0,  # Минимальное значение (0 кг)
        max=10000,  # Максимальное значение (10000 кг)
        step=1000,  # Интервал (1000 кг)
        value=[min_payload, max_payload],  # Текущий выбранный диапазон
        marks={i: str(i) for i in range(0, 10001, 1000)}  # Метки на слайдере
    ),

    # Новый график для отображения зависимости между нагрузкой и результатом запуска
    dcc.Graph(id='success-payload-scatter-chart')
])

# Callback функция для обновления графика на основе выбранного сайта и диапазона нагрузки
@app.callback(
    Output('success-pie-chart', 'figure'),
    Input('site-dropdown', 'value'),
    Input('payload-slider', 'value')
)
def update_pie_chart(selected_site, payload_range):
    if selected_site == 'ALL':
        # Если выбраны все сайты, считаем общее количество успешных запусков
        filtered_df = spacex_df[
            (spacex_df['Payload Mass (kg)'] >= payload_range[0]) &
            (spacex_df['Payload Mass (kg)'] <= payload_range[1])
        ]
        success_counts = filtered_df['class'].value_counts()
        labels = ['Failed', 'Success']
        values = [success_counts.get(0, 0), success_counts.get(1, 0)]
    else:
        # Фильтруем данные для выбранного сайта
        filtered_df = spacex_df[
            (spacex_df['Launch Site'] == selected_site) &
            (spacex_df['Payload Mass (kg)'] >= payload_range[0]) &
            (spacex_df['Payload Mass (kg)'] <= payload_range[1])
        ]
        success_counts = filtered_df['class'].value_counts()
        labels = ['Failed', 'Success']
        values = [success_counts.get(0, 0), success_counts.get(1, 0)]

    # Создаем график
    fig = px.pie(names=labels, values=values, title=f'Success Counts for {selected_site}')
    return fig

# Callback функция для обновления графика рассеяния на основе выбранного сайта и диапазона нагрузки
@app.callback(
    Output('success-payload-scatter-chart', 'figure'),
    Input('site-dropdown', 'value'),
    Input('payload-slider', 'value')
)
def update_scatter_chart(selected_site, payload_range):
    if selected_site == 'ALL':
        # Если выбраны все сайты, отображаем все данные
        filtered_df = spacex_df[
            (spacex_df['Payload Mass (kg)'] >= payload_range[0]) &
            (spacex_df['Payload Mass (kg)'] <= payload_range[1])
        ]
    else:
        # Фильтруем данные для выбранного сайта
        filtered_df = spacex_df[
            (spacex_df['Launch Site'] == selected_site) &
            (spacex_df['Payload Mass (kg)'] >= payload_range[0]) &
            (spacex_df['Payload Mass (kg)'] <= payload_range[1])
        ]

    # Создаем график рассеяния
    fig = px.scatter(
        filtered_df,
        x='Payload Mass (kg)',
        y='class',
        color='Booster Version Category',
        title=f'Payload vs. Mission Outcome for {selected_site}',
        labels={'class': 'Mission Outcome (1 = Success, 0 = Failure)'}
    )

    return fig

if __name__ == '__main__':
    app.run()

